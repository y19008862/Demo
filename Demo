### üõ†Ô∏è 1. **Create and Switch to a New Branch**
git checkout -b your-branch-name
### ‚úçÔ∏è 2. **Do Your Work (Add, Commit)**
git add .
git commit -m "Your meaningful commit message"
### üîÄ 3. **Switch Back to Main**
git checkout main
### üîÑ 4. **Merge Your Branch into Main**
git merge your-branch-name
### ‚¨ÜÔ∏è 5. **Push to Remote (Optional)**
git push origin main


namespace Repository.Models;

public class User
{
    public int Id { get; set; }
    public string Email { get; set; } = null!;
    public string Password { get; set; } = null!;
    public string Name { get; set; } = null!;
    public string Role { get; set; } = null!;
    public ICollection<Product> Products { get; set; } = new List<Product>();
}


using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Repository.Models
{
    public class Product
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Auto-increment (serial)
        public int Id { get; set; }

        [Required]
        [StringLength(100)] // Max length 100
        public string Name { get; set; } = null!;

        [Column(TypeName = "decimal(10,2)")]
        public decimal Price { get; set; }

        [Required]
        public int UserId { get; set; } // Foreign key

        [ForeignKey("UserId")]
        public User User { get; set; } = null!;
    }
}

dotnet ef migrations add AddProductTable --startup-project ../Web
dotnet ef database update --startup-project ../Web

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MyApp.Data.Models
{
    public enum ProductCategory
    {
        Electronics,
        Clothing,
        Food,
        Furniture
    }

    public class Product
    {
        // Primary key (serial)
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        // Required string with max length
        [Required]
        [StringLength(100)]
        public string Name { get; set; } = null!;

        // Nullable string
        [StringLength(200)]
        public string? Description { get; set; }

        // Decimal with precision
        [Column(TypeName = "decimal(10,2)")]
        public decimal Price { get; set; }

        // Boolean value
        public bool IsAvailable { get; set; }

        // Date field
        public DateTime CreatedDate { get; set; }

        // Enum (stored as int by default)
        public ProductCategory Category { get; set; }

        // Foreign key reference to User
        [Required]
        public int UserId { get; set; }

        [ForeignKey("UserId")]
        public User User { get; set; } = null!;
    }
}



